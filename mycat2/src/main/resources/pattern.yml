lib:
  - io.mycat.lib.BaseLibExport
  - io.mycat.lib.FinalCacheExport
  - io.mycat.lib.SQLModifierExport
schemaName: TESTDB1.TRAVELRECORD,TESTDB1.ADDRESS,TESTDB2.*
sql:
  - sql: use {schema}
    code: useSchemaThenResponseOk(matcher.getNameAsString("schema"))

  - sql: show databases
    code: responseFinalCache("/sql/show_databases.sql")

  - sql:  show full tables from `TESTDB1` where table_type = 'BASE TABLE'
    code: responseFinalCache("/sql/show_full_tables_from_testdb1.sql")

  - sql:  show full tables from `TESTDB2` where table_type = 'BASE TABLE'
    code: responseFinalCache("/sql/show_full_tables_from_testdb2.sql")

  - sql:  describe `TESTDB1`.`travelrecord`
    code: responseFinalCache("/sql/describe_testdb1_travelrecord.sql")

  - sql:  describe `TESTDB1`.`address`
    code: responseFinalCache("/sql/describe_testdb1_address.sql")

  - sql: /*!40101 set @@session.wait_timeout=28800 */
    code: responseOk()

  - sql: commit
    code: proxyDatasource(matcher.getSQLAsString(),"mytest3306a")

  - sql: begin
    code: proxyDatasource(matcher.getSQLAsString(),"mytest3306a")

schema:
  - table: TESTDB1.TRAVELRECORD,DB1.TRAVELRECORD
    defaultCode: proxyDatasource(getSQLByMapTable(matcher.getSQLAsString(),"DB1.TRAVELRECORD"),"mytest3306a")
    sql:
      - sql: SELECT * FROM DB1.TRAVELRECORD LIMIT {n}
        code:  proxyDatasource(getSQLByMapTable(matcher.getSQLAsString(),"DB1.TRAVELRECORD"),"mytest3306a")
      - sql: SELECT * FROM DB2.TRAVELRECORD LIMIT {n}
        code:  proxyDatasource(getSQLByMapTable(matcher.getSQLAsString(),"DB1.TRAVELRECORD"),"mytest3306a")
initCode:
  - initFinalCacheFile("d:/cache")
  - finalCacheFile("/sql/show_databases.sql")
  - finalCacheFile("/sql/show_full_tables_from_testdb1.sql")
  - finalCacheFile("/sql/show_full_tables_from_testdb2.sql")
  - finalCacheFile("/sql/describe_testdb1_travelrecord.sql")
  - finalCacheFile("/sql/describe_testdb1_address.sql")
