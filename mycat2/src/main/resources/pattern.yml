lib:
  - io.mycat.lib.ProxyExport
  - io.mycat.lib.FinalSQLResultSetExport
  - io.mycat.lib.SQLModifierExport
  - io.mycat.lib.JdbcExport
  - io.mycat.lib.SessionMapExport
  - io.mycat.lib.CalciteExport
  - io.mycat.lib.CacheResultSetExport
  - io.mycat.lib.TransforFileExport
  - io.mycat.lib.ShardingQueryExport
schemaName: TESTDB1.TRAVELRECORD,TESTDB1.ADDRESS,TESTDB2.*
sql:
  - sql: use {schema}
    code: useSchemaThenResponseOk(matcher.group("schema"))

  - sql: show databases
    code: responseFinalSQL("/sql/show_databases.sql")

  - sql:  show full tables from `TESTDB1` where table_type = 'BASE TABLE'
    code: responseFinalSQL("/sql/show_full_tables_from_testdb1.sql")

  - sql:  show full tables from `TESTDB2` where table_type = 'BASE TABLE'
    code: responseFinalSQL("/sql/show_full_tables_from_testdb2.sql")

  - sql:  describe `TESTDB1`.`travelrecord`
    code: responseFinalSQL("/sql/describe_testdb1_travelrecord.sql")

  - sql:  describe `TESTDB1`.`address`
    code: responseFinalSQL("/sql/describe_testdb1_address.sql")

  - sql: /*!40101 set @@session.wait_timeout=28800 */
    code: responseOk()

  - sql: commit {n}
    code: commitOnJdbc()

  - sql: begin
    code: beginOnJdbc()

  - sql: select {n}
    code: responseQueryCalcite(matcher.getSQLAsString())
  - sql: select 1
    code: transferFileTo("d:/tmp1")
initCode:
  - initFinalSQLCacheFile("d:/cache")
  - finalSQLFile("/sql/show_databases.sql")
  - finalSQLFile("/sql/show_full_tables_from_testdb1.sql")
  - finalSQLFile("/sql/show_full_tables_from_testdb2.sql")
  - finalSQLFile("/sql/describe_testdb1_travelrecord.sql")
  - finalSQLFile("/sql/describe_testdb1_address.sql")
