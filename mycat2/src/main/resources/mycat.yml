metadata: #元数据
  schemas:
    db1: #逻辑库名
      tables:
        travelrecord: #逻辑表名
          columns:
            - columnName: id #分片字段信息,显式提供,升级计划:通过createTableSQL提供该信息
              shardingType: NATURE_DATABASE_TABLE #类型:自然分片,即根据一列或者多个列的值映射成一个值,再根据该值通过单维度的分片算法计算出数据分片范围
              function: { clazz: io.mycat.router.function.PartitionByLong , name: partitionByLong, properties: {partitionCount: '4', partitionLength: '256'}, ranges: {}}
              #提供表的字段信息,升级计划:通过已有数据库拉取该信息
          createTableSQL: |-
            CREATE TABLE `travelrecord` ( `id` bigint(20) NOT NULL,`user_id` varchar(100) CHARACTER SET utf8 DEFAULT NULL,`traveldate` date DEFAULT NULL,`fee` decimal(10,0) DEFAULT NULL,`days` int(11) DEFAULT NULL,`blob` longblob DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          dataNodes: [{targetName: defaultDs ,schemaName: db1, tableName: travelrecord},{targetName: defaultDs ,schemaName: db1, tableName: travelrecord2},
                      {targetName: defaultDs ,schemaName: db1, tableName: travelrecord3},{targetName: repli2 ,schemaName: db2, tableName: travelrecord}]
          #数据分片,targetName,分片目标,可以是数据源或者集群的名字,schemaName:目标库的名字,tableName:目标表的名字
        address:
          columns:
            - columnName: id
              shardingType: MAP_TARGET #动态分片类型,通过任意值映射分片目标,目标库,目标表,要求查询条件要求包列信息,否则可能路由失败
              function: { clazz: io.mycat.router.function.PartitionConstant , properties: {defaultNode: '1'}}
              map:
                 1: defaultDs
            - columnName: addressName
                shardingType: MAP_DATABASE
                function: { clazz: io.mycat.router.function.PartitionConstant , properties: {defaultNode: '1'}}
                map:
                  1: db1
            - columnName: addressName
                shardingType: MAP_TABLE
                function: { clazz: io.mycat.router.function.PartitionConstant , properties: {defaultNode: '1'}}
                map:
                  1: address
          createTableSQL: |-
            CREATE TABLE `address` (`id` int(11) NOT NULL,`addressname` varchar(20) DEFAULT NULL,PRIMARY KEY (`id`))
interceptor: #拦截器
  defaultHanlder: {type: proxy , tags: {target: defaultDs}}
  handlers:
    - name: selectTravelrecord
      tables: ['db1.travelrecord','db1.address']
      sqls: ['select {any}']
      type: select
    - name: insertTravelrecord
      tables: ['db1.travelrecord','db1.address']
      tags: {executeType: UPDATE}
      sqls: ['insert {any}']
      type: insert
    - name: updateTravelrecord
      tables: ['db1.travelrecord','db1.address']
      sqls: ['update {any}','delete {any}']
      type: update
    - name: hbt
      sqls: ['select hbt']
      explain: valuesSchema(fields(fieldType(`1`,`int`)),values())
      type: hbt
  schemas: []
  sqls: [
  {name: commit,sql: 'commit',type: commit},{name: commit;,sql: 'commit;',type: commit},
  {name: begin; ,sql: 'begin',type: begin},{name: begin ,sql: 'begin;',type: begin},
  {name: rollback ,sql: 'rollback',type: rollback},{name: rollback;,sql: 'rollback;',type: rollback},
  {name: useStatement ,sql: 'use {schema}',type: useStatement},{name: useStatement; ,sql: 'use {schema};',type: useStatement},
  {name: setXA ,sql: 'set xa = on',type: setXATransactionType},{name: setXA; ,sql: 'set xa = on;',type: setXATransactionType},
  {name: setProxy ,sql: 'set xa = off',type: setProxyTransactionType},{name: setProxy; ,sql: 'set xa = off;',type: setProxyTransactionType},
  {name: setAutoCommitOff ,sql: 'set autocommit=off',type: setAutoCommitOff},{name: setAutoCommitOff; ,sql: 'set autocommit=off;',type: setAutoCommitOff},
  {name: setAutoCommitOn ,sql: 'set autocommit=on',type: setAutoCommitOn},{name: setAutoCommitOn; ,sql: 'set autocommit=on;',type: setAutoCommitOn},
  {name: setTransactionIsolation ,sql: 'SET SESSION TRANSACTION ISOLATION LEVEL {transactionIsolation}',type: setTransactionIsolation},
  {name: setTransactionIsolation; ,sql: 'SET SESSION TRANSACTION ISOLATION LEVEL {transactionIsolation};',type: setTransactionIsolation},
  ]
datasource:
  datasources: [
  {name: defaultDs, ip: 0.0.0.0,port: 3306,user: root,password: 123456,maxCon: 1000,minCon: 0,
   maxRetryCount: 3, #连接重试次数
   maxConnectTimeout: 1000, #连接超时时间
   dbType: mysql, #
   url: 'jdbc:mysql://127.0.0.1:3306?useUnicode=true&serverTimezone=UTC',
   weight: 1, #负载均衡权重
   initSQL:, #建立连接后执行的sql
   jdbcDriverClass:, #jdbc驱动
   instanceType:,#READ,WRITE,READ_WRITE ,集群信息中是主节点,则默认为读写,副本则为读,此属性可以强制指定可写
  },
  {name: defaultDs2, ip: 0.0.0.0,port: 3306,user: root,password: 123456,maxCon: 1000,minCon: 0,maxRetryCount: 3,maxConnectTimeout: 1000,dbType: mysql,
   url: 'jdbc:mysql://127.0.0.1:3306?useUnicode=true&serverTimezone=UTC',weight: 1,initSQL:,jdbcDriverClass:,instanceType:,#READ,WRITE,READ_WRITE
  }
  ]
  datasourceProviderClass: io.mycat.datasource.jdbc.datasourceProvider.AtomikosDatasourceProvider
  timer: {initialDelay: 1000, period: 5, timeUnit: SECONDS}
clusters: #集群,数据源选择器,既可以mycat自行检查数据源可用也可以通过mycat提供的外部接口设置设置数据源可用信息影响如何使用数据源
  close: true #关闭集群心跳,此时集群认为所有数据源都是可用的,可以通过mycat提供的外部接口设置数据源可用信息达到相同效果
  clusters: [
  {name: repli2 ,
   replicaType: SINGLE_NODE , # SINGLE_NODE:单一节点 ,MASTER_SLAVE:普通主从 GARELA_CLUSTER:garela cluster
   switchType: NOT_SWITCH , #NOT_SWITCH:不进行主从切换,SWITCH:进行主从切换
   readBalanceType: BALANCE_ALL  , #对于查询请求的负载均衡类型
   readBalanceName: BalanceRoundRobin , #对于查询请求的负载均衡类型
   writeBalanceName: BalanceRoundRobin ,  #对于修改请求的负载均衡类型
   masters:[defaultDs2], #主节点列表
   replicas:[],#从节点列表
   heartbeat:{maxRetry: 3, #心跳重试次数
              minSwitchTimeInterval: 12000 , #最小主从切换间隔
              heartbeatTimeout: 12000 , #心跳超时值,毫秒
              slaveThreshold: 0 , # mysql binlog延迟值
              reuqestType: 'mysql' #进行心跳的方式,mysql或者jdbc两种
   }}
  ]
  timer: {initialDelay: 1000, period: 5, timeUnit: SECONDS} #心跳定时器
server:
  ip: 0.0.0.0
  port: 8066
  reactorNumber: 1
#用于多线程任务的线程池,
  worker: {close: false, #禁用多线程池,jdbc等功能将不能使用
           maxPengdingLimit: 65535, #每个线程处理任务队列的最大长度
           maxThread: 2,
           minThread: 2,
           timeUnit: SECONDS,
           waitTaskTimeout: 5 #超时后将结束闲置的线程
  }
#负载均衡类型 BALANCE_ALL:所有数据源参与负载均衡 BALANCE_ALL_READ:所以非master数据源参与负载均衡 BALANCE_NONE:只有master(一个)参与负载
plug:
  loadBalance:
    defaultLoadBalance: balanceRandom
    loadBalances: [
    {name: BalanceRunOnMaster, clazz: io.mycat.plug.loadBalance.BalanceRunOnMaster},
    {name: BalanceLeastActive, clazz: io.mycat.plug.loadBalance.BalanceLeastActive},
    {name: BalanceRoundRobin, clazz: io.mycat.plug.loadBalance.BalanceRoundRobin},
    {name: BalanceRunOnMaster, clazz: io.mycat.plug.loadBalance.BalanceRunOnMaster},
    {name: BalanceRunOnRandomMaster, clazz: io.mycat.plug.loadBalance.BalanceRunOnRandomMaster}
    ]